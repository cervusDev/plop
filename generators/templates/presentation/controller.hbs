
{{#if controller}}

  {{#if user}}
@UseGuards(JwtGuard)
  {{/if}}
@Controller()
export class {{pascalCase name}}Controller implements BaseController<{{pascalCase name}}> {
  constructor(
    private readonly create{{pascalCase name}}Usecase: Create{{pascalCase name}}Usecase,
    private readonly findAll{{pascalCase name}}Usecase: FindAll{{pascalCase name}}Usecase,
    private readonly findOne{{pascalCase name}}Usecase: FindOne{{pascalCase name}}Usecase,
    private readonly update{{pascalCase name}}Usecase: Update{{pascalCase name}}Usecase,
    private readonly delete{{pascalCase name}}Usecase: Delete{{pascalCase name}}Usecase,
  ) {}
  @Post()
  public async create(@Body() create{{pascalCase name}}Dto: Create{{pascalCase name}}Dto): Promise<{{pascalCase name}}> {
      throw new Error('Method not implemented.');
  }

  @Get()
  public async all(): Promise<{{pascalCase name}}[]> {
      throw new Error('Method not implemented.');
;
  }

  @Get(':id')
  public async find(@Param('id') id: number): Promise<{{pascalCase name}}> {
      throw new Error('Method not implemented.');

  }

  @Patch(':id')
  public async update(
    @Param('id') id: number,
    @Body() update{{pascalCase name}}Dto: Update{{pascalCase name}}Dto,
  ): Promise<{{pascalCase name}}> {
      throw new Error('Method not implemented.');

  }

  @Delete(':id')
    public async delete(@Param('id') id: number): Promise<void> {
      throw new Error('Method not implemented.');
    }
}
{{else}}
  {{#if user}}
@UseGuards(JwtGuard)
  {{/if}}
@Controller()
export class {{pascalCase name}}Controller implements BaseController<{{pascalCase name}}> {
  constructor(
      {{#if create}}
    private readonly create{{pascalCase name}}Usecase: Create{{pascalCase name}}Usecase,
        {{/if}}
        {{#if readAll}}
    private readonly findAll{{pascalCase name}}Usecase: FindAll{{pascalCase name}}Usecase,
        {{/if}}
        {{#if read}}
    private readonly findOne{{pascalCase name}}Usecase: FindOne{{pascalCase name}}Usecase,
        {{/if}}
        {{#if update}}
    private readonly update{{pascalCase name}}Usecase: Update{{pascalCase name}}Usecase,
        {{/if}}
        {{#if delete}}
    private readonly delete{{pascalCase name}}Usecase: Delete{{pascalCase name}}Usecase,
        {{/if}}
  ) {}

    {{#if create}}
  @Post()
  public async create(@Body() create{{pascalCase name}}Dto: Create{{pascalCase name}}Dto): Promise<{{pascalCase name}}> {
    throw new Error('Method not implemented.');
  }
    {{/if}}

    {{#if readAll}}
  @Get()
  public async all(): Promise<{{pascalCase name}}[]> {
    throw new Error('Method not implemented.');
  } 
    {{/if}}

    {{#if read}}
  @Get(':id')
  public async find(@Param('id') id: number): Promise<{{pascalCase name}}> {
      throw new Error('Method not implemented.');

  }
    {{/if}}

    {{#if update}}
  @Patch(':id')
  public async update(
    @Param('id') id: number,
    @Body() updateUserDto: Update{{pascalCase name}}Dto,
  ): Promise<Usuario> {
      throw new Error('Method not implemented.');

  }
    {{/if}}

    {{#if delete }}
  @Delete(':id')
    public async delete(@Param('id') id: number): Promise<void> {
      throw new Error('Method not implemented.');
    }
    {{/if}}
}
{{/if}}
