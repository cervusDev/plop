
{{#if subProviderName}}
@Injectable()
export class Create{{pascalCase name}}Usecase implements UseCase<{{pascalCase name}}>{
    constructor (
        @Inject()
        private readonly {{dashcase name}}Repository: I{{pascalCase name}}Repository,
        @Inject()
        private readonly {{subProviderName}}Repository: I{{pascalCase subProviderName}}Repository
    ) {}

    public async execute(input: Create{{pascalCase name}}Dto): Promise<{{pascalCase name}}> {
        return this.{{dashcase name}}Repository.create(input);
    }
}
{{else}}
@Injectable()
export class Create{{pascalCase name}}Usecase implements UseCase<{{pascalCase name}}>{
    constructor (
        @Inject()
        private readonly {{dashcase name}}Repository: I{{pascalCase name}}Repository,
    ) {}

    public async execute(input: Create{{pascalCase name}}Dto): Promise<{{pascalCase name}}> {
        return this.{{dashcase name}}Repository.create(input);
    }
}
{{/if}} 